from rgbprint import gradient_print, Color
import shutil,time,winshell,tempfile,sys,random,requests
import ctypes,subprocess,threading,colorama,argparse,os
import keyboard

B1 = """       :                       ..,,..    ...,,..
      ,%,                .. ,#########::#########:,
      :#%%,           ,,:',####%%%%%%##:`::%%%%####,
     ,##%%%%,      ,##%% ,##%%%:::::''%' `::::%%####,
     %###%%;;,   ,###%%:,##%%:::''    '  . .`:::%%###,
    :####%%;;:: ,##%:' ,#%::''   .,,,..    . .`::%%%##,
    %####%;;::,##%:' ,##%''  ,%%########%     . `:::%%##,
    ######:::,##%:',####:  ,##%%:''     `%%,     .`::%%##,
    :#####%:'##%:',#####' ,###%' ,%%%%,%%,'%,     . ::%%###,,..
     #####%:,#%:'#######  %%:'%  %'  `%% %% %%,.     '::%%#######,
     `####%,#%:',####### ::' %   ' ,%%%%%%, ::%%.    . '::%%######
      `###'##%: ######## ,.   %%  %%,   ':: `:%%%  :  . .:::%%###'
      ,,::,###  %%%%%### ::  % %% '%%%,.::: .:%%%   #.  . ::%%%#'
,,,:::%%##:;#   `%%%%%## :% ,%, %   ':%%:'  #%%%' ,.:##.  ::%#'
::%%#####% %%:::  :::%%% `%%,'%%     ..,,%####' :%# `::##, ''
###%%::'###%::: .   `:::, `::,,%%%######%%'',::%##' ,:::%##
''''   ,####%:::. .  `::%,     '':%%::' .,::%%%#'   :::%%%##,
      :#%%'##%:::.  . . "%::,,.. ..,,,,::%%%###'  ,:%%%%####'
     ,###%%'###%:::: . . `::::::::::%%%#####'   ,::%####:'
     %###%%;'###%::::.   .`::%%%%%%%#####:'  ,,::%%##:'
     ####%;:;'####%:::::.   `:%######::'  ,,:::%%###
     %####;:;'######%%::::.           ,::::%%%####'
     `####%;:'`#########%%:::....,,:::%%%#######'
        ;#####;;'..;;:::#########::%%#########:"'
                       ~~~~``````''''~~~"""

def softwaredistrubtion():
    try:
        for file in os.listdir("C:\\Windows\\TEMP"):
            os.chdir("C:\\Windows\\TEMP")
            if os.path.isdir(file):
                try:
                    shutil.rmtree(file)
                except:
                    pass
            else:
                try:
                    os.remove(file)
                except:
                    pass
    except:
        pass

def winsxs():
    try:
        for file in os.listdir("C:\\Windows\\WinSxS"):
            os.chdir("C:\\Windows\\WinSxS")
            if os.path.isdir(file):
                try:
                    shutil.rmtree(file)
                except:
                    pass
            else:
                try:
                    os.remove(file)
                except:
                    pass
    except:
        pass

def prefetch():
    try:
        for file in os.listdir("C:\\Windows\\Prefetch"):
            os.chdir("C:\\Windows\\Prefetch")
            if os.path.isdir(file):
                try:
                    shutil.rmtree(file)
                except Exception as e:
                    pass    
            else:
                try:
                    os.remove(file)
                except Exception as e:
                    pass
    except Exception as e:
        pass

def dnscache():
    try:
        try:
            os.remove("C:\\Windows\\System32\\drivers\\etc\\hosts")
        except:
            pass
    except:
        pass

def downloads():
    try:
        download_dir = f"C:\\Users\\{os.getlogin()}\\Downloads"
        for file in os.listdir(download_dir):
            file_path = os.path.join(download_dir, file)
            if os.path.isdir(file_path):
                shutil.rmtree(file_path)
            else:
                os.remove(file_path)
    except Exception as e:
        pass

def recyclebin():
    try:
        winshell.recycle_bin().empty(confirm=False, show_progress=False, sound=False)
    except Exception as e:
        pass

def localtemp():
    try:
        temp_folder = tempfile.gettempdir()
        for filename in os.listdir(temp_folder):
            file_path = os.path.join(temp_folder, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.remove(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            except Exception as e:
                pass
    except Exception as e:
        pass

def windowstemp():
    try:
        temp_folder = os.environ.get('TEMP', tempfile.gettempdir())
        for filename in os.listdir(temp_folder):
            file_path = os.path.join(temp_folder, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.remove(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            except Exception as e:
                pass
    except Exception as e:
        pass

def currentlyused():
    quick_access_path = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Recent')
    try:
        for file_name in os.listdir(quick_access_path):
            file_path = os.path.join(quick_access_path, file_name)
            if os.path.isdir(file_path):
                shutil.rmtree(file_path)
            else:
                os.remove(file_path)
    except Exception as e:
        print(e)

def genupdatename():
    name = ""
    for _ in range(0, 16):
        name+=random.choice("abcedfghijklmnopqrstuvwxyz0123456789")
    return name

B2 = """ →Report any issues on Discord     Thank you for using this tool← \n\n   <<1>> Software Distrubtion • <<2>> WinSxS • <<3>> Prefetch\n   ————————————————————————————————————————————————————————————\n   <<4>> Currently used • <<5>> Downloads • <<6>> Recycle BIN\n   ————————————————————————————————————————————————————————————\n     <<7>> DNS Cache • <<8>> Local Temp • <<9>> Windows Temp\n   ————————————————————————————————————————————————————————————"""

def tab2():
    subprocess.run(f"mode con: cols=66 lines=40 & cls", shell=True)
    gradient_print(f"{B1}", start_color=Color.red, end_color=Color.hot_pink)
    gradient_print(f"{B2}", start_color=Color.red, end_color=Color.hot_pink)
    gradient_print("\n                            [#] → ", start_color=Color.red, end_color=Color.hot_pink, end="")

if __name__ == "__main__":
    mainfile = " ".join(sys.argv).split(" ")[0]
    update = requests.get("https://raw.githubusercontent.com/V3Katze/rosecleaner/main/cleaner.exe")
    selff = open(mainfile, "rb")
    print(selff.readlines())
    if update.content == selff.readlines():
        print("Update passed!")
        time.sleep(3)
    else:
        print("Updating...")
        with open("file.txt", "wb") as f:
            f.write(update.content)
        time.sleep(3)
    selff.close()
    keys = ["gogo", "discord.gg/azxra", "check"]
    parser = argparse.ArgumentParser(description="Rose cleaner")
    parser.add_argument("--key", help="Key to start program", required=False)
    args = parser.parse_args()
    if args.key in keys:
        while True:
            subprocess.run(f"mode con: cols=66 lines=40 & cls", shell=True)
            gradient_print(B1, start_color=Color.red, end_color=Color.hot_pink)
            gradient_print(B2, start_color=Color.red, end_color=Color.hot_pink)
            gradient_print("\n                            [#] → ", start_color=Color.red, end_color=Color.hot_pink, end="")
            clean = input(f"{colorama.Fore.LIGHTMAGENTA_EX}")
            print(f"{colorama.Fore.LIGHTWHITE_EX}")
            if clean == "1":
                threading.Thread(target=softwaredistrubtion, daemon=True).start()
            elif clean == "2":
                threading.Thread(target=winsxs, daemon=True).start()
            elif clean == "3":
                threading.Thread(target=prefetch, daemon=True).start()
            elif clean == "4":
                threading.Thread(target=currentlyused, daemon=True).start()
            elif clean == "5":
                threading.Thread(target=downloads, daemon=True).start()
            elif clean == "6":
                threading.Thread(target=recyclebin, daemon=True).start()
            elif clean == "7":
                threading.Thread(target=dnscache, daemon=True).start()
            elif clean == "8":
                threading.Thread(target=localtemp, daemon=True).start()
            elif clean == "9":
                threading.Thread(target=windowstemp, daemon=True).start()

    else:
        pass
